package com.ftbap.ftbap;

import com.google.gson.JsonObject;
import net.minecraft.server.MinecraftServer;
import net.minecraftforge.fml.common.FMLCommonHandler;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuestManager {
    private static final Logger LOGGER = LogManager.getLogger();
    private Map<String, Quest> quests;
    private final Gson gson;

    public QuestManager() {
        quests = new HashMap<>();
        gson = new Gson();
    }

    public void loadQuestsFromFTBQuests() {
        MinecraftServer server = FMLCommonHandler.instance().getMinecraftServerInstance();
        if (server == null) {
            LOGGER.error("Failed to get MinecraftServer instance");
            return;
        }

        File worldDirectory = server.getWorld(0).getSaveHandler().getWorldDirectory();
        File ftbQuestsDirectory = new File(worldDirectory, "ftbquests");

        if (!ftbQuestsDirectory.exists() || !ftbQuestsDirectory.isDirectory()) {
            LOGGER.error("FTBQuests directory not found");
            return;
        }

        loadQuestsRecursively(ftbQuestsDirectory);
    }

    private void loadQuestsRecursively(File directory) {
        File[] files = directory.listFiles();
        if (files == null) return;

        for (File file : files) {
            if (file.isDirectory()) {
                loadQuestsRecursively(file);
            } else if (file.getName().endsWith(".snbt")) {
                try {
                    JsonObject questData = gson.fromJson(new FileReader(file), JsonObject.class);
                    String questId = questData.get("id").getAsString();
                    String questTitle = questData.get("title").getAsString();
                    List<String> rewards = parseRewards(questData);
                    
                    Quest quest = new Quest(questId, questTitle, rewards);
                    quests.put(questId, quest);
                    LOGGER.info("Loaded quest: " + questTitle + " with " + rewards.size() + " rewards");
                } catch (Exception e) {
                    LOGGER.error("Error parsing quest file: " + file.getName(), e);
                }
            }
        }
    }

    private List<String> parseRewards(JsonObject questData) {
        List<String> rewards = new ArrayList<>();
        if (questData.has("rewards")) {
            JsonArray rewardsArray = questData.getAsJsonArray("rewards");
            for (int i = 0; i < rewardsArray.size(); i++) {
                JsonObject reward = rewardsArray.get(i).getAsJsonObject();
                if (reward.has("item")) {
                    rewards.add(reward.get("item").getAsString());
                }
            }
        }
        return rewards;
    }

    public Quest getQuest(String questId) {
        return quests.get(questId);
    }

    public boolean hasQuest(String questId) {
        return quests.containsKey(questId);
    }

    public List<Quest> getAllQuests() {
        return new ArrayList<>(quests.values());
    }
}